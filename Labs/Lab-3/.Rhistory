return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval(sampleMean,SD,n))
confidenceInterval <- function(sampleMean,sd,n){
error <- qnorm(0.925) * sd / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
sampleMean <- 10
SD <- 3
n <- 30
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(sampleMean,sd,n){
error <- qnorm(0.925) * sd / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
sampleMean <- 10
SD <- 3
n <- 30
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval(sampleMean = .SD.n))
confidenceInterval <- function(sampleMean,sd,n){
error <- qnorm(0.925) * sd / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
sampleMean <- 10
SD <- 3
n <- 30
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval(10,3,30))
confidenceInterval <- function(sampleMean,sd,n){
error <- qnorm(0.925) * sd / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval(10,3,30))
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
confidenceInterval(c(1,2,3))
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
print(aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval))
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=sd)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=var)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.925) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceInterval <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.95) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceIntervalNumThree <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.995) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
library('seqinr')
dengue <- read.fasta(file = 'dengue_seq.txt')
dengue_vec <- as.vector(dengue[[1]])
library('seqinr')
dengue <- read.fasta(file = 'dengue_seq.txt')
dengue_vec <- as.vector(dengue[[1]])
GC_content <- function(tideSeq){
length <- 0
ctides<- 0
gtides <- 0
for(i in tideSeq){
length <- length + 1
if(i=="g"){
gtides <- gtides + 1
}
if(i=="c"){
ctides <- ctides + 1
}
}
gccontent <- ((gtides + tides)/(length))*(100)
return(gccontent)
}
GC_content <- function(tideSeq){
length <- 0
ctides<- 0
gtides <- 0
for(i in tideSeq){
length <- length + 1
if(i=="g"){
gtides <- gtides + 1
}
if(i=="c"){
ctides <- ctides + 1
}
}
gccontent <- ((gtides + tides)/(length))*(100)
return(gccontent)
}
GC_content(dengue_vec)
GC_content <- function(tideSeq){
length <- 0
ctides<- 0
gtides <- 0
for(i in tideSeq){
length <- length + 1
if(i=="g"){
gtides <- gtides + 1
}
if(i=="c"){
ctides <- ctides + 1
}
}
gccontent <- ((gtides + ctides)/(length))*(100)
return(gccontent)
}
GC_content(dengue_vec)
funkySampler <- function(dataset, sample, n){
results <- numeric(n)
for(i in 1:n){
vectorSample <- sample(dataset, sample)
results[i] <- GC_content(vectorSample)
}
return(results)
}
funkySampler <- function(dataset, sample, n){
results <- numeric(n)
for(i in 1:n){
vectorSample <- sample(dataset, sample)
results[i] <- GC_content(vectorSample)
}
return(results)
}
funkySampler(dengue_vec,10,1000)
funkySampler <- function(dataset, sample, n){
results <- numeric(n)
for(i in 1:n){
vectorSample <- sample(dataset, sample)
results[i] <- GC_content(vectorSample)
}
return(results)
}
funkySampler(dengue_vec,1,1)
funkySampler <- function(dataset, sample, n){
results <- numeric(n)
for(i in 1:n){
vectorSample <- sample(dataset, sample)
results[i] <- GC_content(vectorSample)
}
return(results)
}
funkySampler(dengue_vec,1,2)
firstSim <- funkySampler(dengue_vec,9,900)
hist(firstSim,main="Histogram of First Simulation w/ GC Content",col="blue", xlab="Nucleotide Sequence GC_Content")
secSim <- funkySampler(dengue_vec,90,900)
hist(secSim,main="Histogram of Second Simulation w/ GC Content",col="green", xlab="Nucleotide Sequence GC_Content")
threeSim <- funkySampler(dengue_vec,900,900)
hist(threeSim,main="Histogram of Third Simulation w/ GC Content",col="red", xlab="Nucleotide Sequence GC_Content")
fourSim <- funkySampler(dengue_vec,9000,900)
hist(fourSim,main="Histogram of Four Simulation w/ GC Content",col="yellow", xlab="Nucleotide Sequence GC_Content")
firstSim <- funkySampler(dengue_vec,9,900)
hist(firstSim,main="Histogram of First Simulation w/ GC Content",col="blue", xlab="Nucleotide Sequence GC_Content")
secSim <- funkySampler(dengue_vec,90,900)
hist(secSim,main="Histogram of Second Simulation w/ GC Content",col="green", xlab="Nucleotide Sequence GC_Content")
threeSim <- funkySampler(dengue_vec,900,900)
hist(threeSim,main="Histogram of Third Simulation w/ GC Content",col="red", xlab="Nucleotide Sequence GC_Content")
fourSim <- funkySampler(dengue_vec,9000,900)
hist(fourSim,main="Histogram of Four Simulation w/ GC Content",col="yellow", xlab="Nucleotide Sequence GC_Content")
firstSim <- funkySampler(dengue_vec,9,900)
hist(firstSim,main="Histogram of First Simulation w/ GC Content",col="blue", xlab="Nucleotide Sequence GC_Content")
secSim <- funkySampler(dengue_vec,90,900)
hist(secSim,main="Histogram of Second Simulation w/ GC Content",col="green", xlab="Nucleotide Sequence GC_Content")
threeSim <- funkySampler(dengue_vec,900,900)
hist(threeSim,main="Histogram of Third Simulation w/ GC Content",col="red", xlab="Nucleotide Sequence GC_Content")
fourSim <- funkySampler(dengue_vec,9000,900)
hist(fourSim,main="Histogram of Four Simulation w/ GC Content",col="yellow", xlab="Nucleotide Sequence GC_Content")
#AS THE SAMPLE SIZE CHANGES, THE DISTRIBUTION BECOMES MORE AND MORE SYMMETRIC, AND BASICALLY PERFECTLY SYMMETRIC IN THE LAST HISTOGRAM.
file <- read.csv("MeaslesOutbreaks.csv", header=TRUE,sep=",")
plot(measlesOutbreakData$yearByQuarter,measlesOutbreakData$confirmedCases)
measlesOutbreakData <- read.csv("MeaslesOutbreaks.csv", header=TRUE,sep=",")
plot(measlesOutbreakData$yearByQuarter,measlesOutbreakData$confirmedCases)
plot(measlesOutbreakData$yearByQuarter,measlesOutbreakData$confirmedCases,ylab="Confirmed Cases of Measles",xlab="Year by Quarter (years)")
plot(measlesOutbreakData$yearByQuarter,measlesOutbreakData$confirmedCases,ylab="Confirmed Cases of Measles",xlab="Year by Quarter (years)",col="blue")
plot(measlesOutbreakData$yearByQuarter,measlesOutbreakData$confirmedCases,ylab="Confirmed Cases of Measles",xlab="Year by Quarter (years)",col="blue",type="l")
confidenceIntervalNumThree <- function(vec){
# sampleMean <- mean(vec)
# std <- sd(vec)
# n <- length(vec)
# error <- qnorm(0.995) * std / sqrt(n)
sampleMean<-mean(vec)
stanError<-sd(x)/(length(vec)^(1/2))
error<- stanError*qnorm(0.995)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceInterval)
confidenceIntervalNumThree <- function(vec){
# sampleMean <- mean(vec)
# std <- sd(vec)
# n <- length(vec)
# error <- qnorm(0.995) * std / sqrt(n)
sampleMean<-mean(vec)
stanError<-sd(x)/(length(vec)^(1/2))
error<- stanError*qnorm(0.995)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceIntervalNumThree)
confidenceIntervalNumThree <- function(vec){
sampleMean <- mean(vec)
std <- sd(vec)
n <- length(vec)
error <- qnorm(0.995) * std / sqrt(n)
lower <- sampleMean - error #lower value of the 90% confidence interval
upper <- sampleMean + error # upper value of the 90% confidence interval
ans <- c(lower,upper)
return (ans)
}
aggregate(PlantGrowth$weight, by=list(PlantGrowth$group), FUN=confidenceIntervalNumThree)
#They are the same ?
aggregte(ToothGrowth$len,by=list(ToothGrowth$supp),FUN=sd)
aggregate(ToothGrowth$len,by=list(ToothGrowth$supp),FUN=sd)
boxplot(ToothGrowth$len ~ ToothGrowth$supp)
vector <- c(0.10, 0.30, 0.67, 0.59, 0.49, 0.50, 0.77)
round(vector)
nFlips <- 99
runif(99)
nFlips <- 99
placeVec <- runif(99)
nFlips <- 99
placeVec <- runif(99)
class(placeVec)
nFlips <- 99
placeVec <- runif(99)
class(placeVec)
placeVec[3]
nFlips <- 99
placeVec <- runif(99)
results <- round(placeVec)
nFlips <- 99
placeVec <- runif(99)
results <- round(placeVec)
results
nFlips <- 99
placeVec <- runif(nFlips)
results <- round(placeVec)
results
nFlips <- 99
placeVec <- runif(nFlips)
results <- round(placeVec)
results
sum(results)
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
nTrials <- 10000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 30
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
print(results)
nTrials <- 30
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 300
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 3000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 1000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 2500
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
nTrials <- 2500
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials
# As you incresae the number of coin flips for each trial.
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(20))
results[i]<-sum(trialResult)
}
#print(results)
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(200))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials, the distrubtion becomes more and more symmetric.
# As you incresae the number of coin flips for each trial.
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials, the distrubtion becomes more and more symmetric.
# As you incresae the number of coin flips for each trial.
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(1200))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials, the distrubtion becomes more and more symmetric.
# As you incresae the number of coin flips for each trial.
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(10))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials, the distrubtion becomes more and more symmetric.
# As you incresae the number of coin flips for each trial, the distrubtion stays relatively the same, but the frequency of each number of heads landed increases, y-axis scale increases
nTrials <- 2000
results <- numeric(2000)
for(i in 1:nTrials){
trialResult <- round(runif(210))
results[i]<-sum(trialResult)
}
#print(results)
hist(results,xlab="Number of Heads Landed in Trials",ylab="Frequency of Heads",main="Coin Flipping Results")
# As you increase the number of trials, the distrubtion becomes more and more symmetric.
# As you incresae the number of coin flips for each trial, the distrubtion stays relatively the same, but the frequency of each number of heads landed increases, y-axis scale stays relatively the same
