ans<-class(myNewVector)
myNewVector <- c('y', 5)
ans<-class(myNewVector)
print(paste("myNewVector is a",ans))
ans<-class(myNewVector)
print(paste("myNewVector is a",ans,"vector"))
ans<-class(myNewVector)
print(paste("myNewVector is a [",ans,"] vector"))
ans<-class(myNewVector)
print(paste("myNewVector is a [",ans,"] vector"))
myNewVector
myNewVector[2]
myNewVector[2]*10
y <- 10:20
y[4]
y
y[length(y)-1]
y[-1]
y[length(y)-1]
y[2]*y[length-1]
y[2]*y[length(y)-1]
firstPartAnswer <- y[2]*y[length(y)-1]
firstPartAnswer <- y[2]*y[length(y)-1]
print(firstPartAnswer)
mean <- mean(c(y[2],y[5],y[6],y[8]))
firstPartAnswer <- y[2]*y[length(y)-1]
print(firstPartAnswer)
mean <- mean(c(y[2],y[5],y[6],y[8]))
print(mean)
numericVec <- numeric(10)
characterVec <- character(10)
numericVec
characterVec
first<-c(1,2,3)
second<-c(6,7)
first*second
charc<-c("a","b","c")
first*charc
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
charVec <- c("a","b","c")
print(unequalLengthOne*charVec)
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
charVec <- c("a","b","c")
#print(unequalLengthOne*charVec)
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
print("3 gets mltiplied by 46 because 3 does not have a matched up multiplicand")
charVec <- c("a","b","c")
print(unequalLengthOne*charVec)
matrix(nrow = 2, ncol = 2, data = 1:4)
matrix(nrow = 2, ncol = 2, data = 1:4, byrow =TRUE)
matrix(nrow = 2, ncol = 2, data = 1:6, byrow =TRUE)
matrix(nrow = 2, ncol = 2, data = 1:2, byrow =TRUE)
x <- matrix(nrow = 5, ncol = 5, data = 1:25)
x
rowMeans(x)
colMeans(x)
mean(x)
sd(x)
sd(x) #Using this function finds the standard deviation using all elements in the matrix
mean(x)
sd(x) #Using this function finds the standard deviation using all elements in the matrix
mean(x)
var(x)
sum(x)
sd(x) #Using this function finds the standard deviation using all elements in the matrix
mean(x) #R calculates mean using every element in the matrix.
SE(x)
sd(x) #Using this function finds the standard deviation using all elements in the matrix
mean(x) #R calculates mean using every element in the matrix.
sum(x)
sd(x) #Using this function finds the standard deviation using all elements in the matrix
mean(x) #R calculates mean using every element in the matrix.
sum(x) #R calculates sum using every element in the matrix.
var(x)
ncol(x)
nrow(x)
dim(x)
myMatrix <- matrix(nrow=7,ncol=8,data=1:56)
myMatrix <- matrix(nrow=7,ncol=8,data=1:56)
myMatrix
myMatrix <- matrix(nrow=7,ncol=8,data=1:56)
dim(myMatrix)
testMatrix <- matrix(nrow = 3, ncol = 3, data = 1:9)
testMatrix
testMatrix[3, 2]
testMatrix[2, 3]
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(10,100,22.5))
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,100,4))
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,100,4))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,100,25))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,120,25))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,16,4))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,100,2))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,100,4))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = seq(0,10,4))
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:8)
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:7)
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:7)
myNewMatrix[1,1] <- 11
myNewMatrix[1,2] <- 23
myNewMatrix[2,1] <- 44
myNewMatrix[2,2] <- 135
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:7)
myNewMatrix[1,1] <- 11
myNewMatrix[1,2] <- 23
myNewMatrix[2,1] <- 44
myNewMatrix[2,2] <- 135
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:7)
myNewMatrix
myNewMatrix[1,1] <- 11
myNewMatrix[1,2] <- 23
myNewMatrix[2,1] <- 44
myNewMatrix[2,2] <- 135
myNewMatrix
myNewMatrix <- matrix(nrow = 2, ncol = 2, data = 4:7)
print("old matrix-originally created")
myNewMatrix
myNewMatrix[1,1] <- 11
myNewMatrix[1,2] <- 23
myNewMatrix[2,1] <- 44
myNewMatrix[2,2] <- 135
print("new matrix with updated values")
myNewMatrix
testMatrix[2,]
testMatrix[, 2]
x <- matrix(data = 1:9, nrow = 3, ncol = 3)
for(i in 1:nrow(x)){
for(j in 1:ncol(x)){
print(x[i,j])
}
}
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
}
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
return(ansVec)
}
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
ansVec[i]<-sd(m[i,])
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
ansVec[i]<-sd(m[i,])
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
#ansVec[i]<-sd(m[i,])
print(i)
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
#ansVec[i]<-sd(m[i,])
#print(i)
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
#ansVec[i]<-sd(m[i,])
print(i)
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in nrow(m)){
#ansVec[i]<-sd(m[i,])
print(i)
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in 1:nrow(m)){
#ansVec[i]<-sd(m[i,])
print()
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in 1:nrow(m)){
#ansVec[i]<-sd(m[i,])
print(i)
}
return(ansVec)
}
stDevMatrix(x)
myVector <- c('x', 'y', 'z')
class(myVector)
myVector <- c(1, 2, 3)
myNewVector <- c('y', 5)
ans<-class(myNewVector)
print(paste("myNewVector is a [",ans,"] vector"))
# if we use `myNewVector[2]` we cannot perform operations on the 5 because it is considered as a string by R, since it is a character vector. We can only perform character operations on it.
y <- 10:20
y[4]
firstPartAnswer <- y[2]*y[length(y)-1]
print(firstPartAnswer)
mean <- mean(c(y[2],y[5],y[6],y[8]))
print(mean)
numericVec <- numeric(10)
characterVec <- character(10)
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
print("3 gets mltiplied by 46 because 3 does not have a matched up multiplicand")
charVec <- c("a","b","c")
print(unequalLengthOne*charVec)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in 1:nrow(m)){
ansVec[i]<-sd(m[i,])
#print(i)
}
return(ansVec)
}
stDevMatrix(x)
stDevMatrix <- function(m){
ansVec<-numeric(nrow(m))
for(i in 1:nrow(m)){
ansVec[i]<-sd(m[i,])
#print(i)
}
return(ansVec)
}
testMatrix
stDevMatrix(testMatrix)
testMatrix + testMatrix
testMatrix * testMatrix
testMatrix
#testMatrix + testMatrix
testMatrix %*% testMatrix
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
print("3 gets mltiplied by 46 because 3 does not have a matched up multiplicand")
charVec <- c("a","b","c")
unequalLengthOne*charVec
unequalLengthOne <- c(1,2,3)
unequalLengthTwo <- c(46,6)
print(unequalLengthTwo*unequalLengthOne)
print("3 gets mltiplied by 46 because 3 does not have a matched up multiplicand")
charVec <- c("a","b","c")
unequalLengthOne*charVec
mean(c(0.439,0.447,0.396))
mean(c(0.136,0.131,0.124))
mean(c(0.466,0.391,0.327))
mean(c(0.134,0.140,0.135))
mean(c(0.313,0.298,0.294))
mean(c(0.166,0.168,0.151))
