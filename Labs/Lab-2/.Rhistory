hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 5)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 4)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 5)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 6)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 7)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 8)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 9)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks = 9)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =19)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =19)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =10)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =5)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =6)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =7)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =8)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =4)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =5)
hist(myData$Caffeine_mg_in_16_oz_coffee, xlab = 'Caffeine (MG) per 16 oz cup', col = 'violetred', breaks =5)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec * 5
print(cVec)
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(vec)
cVec
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
cVec <- vec*5
cVec
for(i in cVec){ cVec[i] = 1/(cVec[i]) }
cVec
for(i in cVec){print i}
for(i in cVec){print(i)}
cVec
vec
test<-vec*5
test
test[1]
test[1]=(1/test[1])
test[1]
test
for(i in test){}
ansVec <- c()
ansVec
for(i in test){ ansVec[i] = 1/test[i] }
test
ansVec
getSquare <- function(num){
result <- num * num
return(result)
}
getSquare(4)
getSquare(8)
myFunc <- function(param){
print(param)
ans <- (param^4)
return(ans)
}
myFunc(89)
multipleArgFunction <- function(numA, numB, numC){
answer <- numA * numB + numC
return(answer)
}
multipleArgFunction(1, 2, 3)
multipleArgFunction(3, 2, 1)
multipleArgFunction(numC = 3, numB = 2, numA = 1)
multipleArgFunction(1, 2, 3)
noInputFunc <- function(){
return("It works!")
}
noInputFunc()
getSquare <- function(vec){
y <- vec * vec
plot(y)
}
getSquare(-10:10)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
print(cVec)
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
print(cVec[i])
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
print(cVec[3])
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
print(cVec[5])
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
print(cVec[2])
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec * 5
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(vec)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec * 5
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
}
recip(-2:12)
vec <- c(-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12)
recip <- function(paramVec){
cVec <- paramVec * 5
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(-2:12)
recip <- function(paramVec){
cVec <- paramVec * 5
for(i in cVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec * 5
for(i in paramVec){
#replace each position with the reciprocal
cVec[i] = 1/(cVec[i])
}
plot(cVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec * 5
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec * 5
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec * 5
print(paramVec)
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec * 5
print(paramVec*5)
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
recip <- function(paramVec){
paramVec <- paramVec * 5
print(paramVec)
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
myData <- read.csv('titanic.csv', header = T, sep = ',')
myData
View(myData)
View(myData)
View(myData)
ages <- myData$Age
print(ages)
ages <- myData$Age
plot(ages)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 1)
ages <- myData$Age
hist(myData$Age, xlab = 'Passenger Age', col = 'green', breaks = 1)
ages <- myData$Age
hist(myData$Age, xlab = 'Passenger Age', col = 'white', breaks = 1)
ages <- myData$Age
hist(myData$Age, xlab = 'Passenger Age', col = 'green', breaks = 4)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 4)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 2)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 3)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 4)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 5)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 4)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 6)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 5)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 6)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 8)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 9)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 10)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 11)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 6)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 3)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 5)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 6)
ages <- myData$Age
hist(ages, xlab = 'Passenger Age', col = 'green', breaks = 6)
#
ages <- myData$Age
hist(ages, xlab = 'Passenger Age (Years)', col = 'green', breaks = 6)
#
ages <- myData$Age
hist(ages, main="Histogram for PassengerAge",xlab = 'Passenger Age (Years)', col = 'green', breaks = 6)
#Distribution is skewed to the
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 6)
#Distribution is skewed to the
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 16)
#Distribution is positive skewed.
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 9)
#Distribution is positive skewed.
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 12)
#Distribution is positive skewed.
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 7)
#Distribution is positive skewed.
ages <- myData$Age
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 6)
#Distribution is positive skewed.
myRange <- function(vec){
answerVec <- c(min(vec),max(vec))
return(answerVec)
}
# long way to do this is using a for loop to go through the vector to find largest and smallest integer value, but using the built-in functions its easier.
#This matches R's built-in range function. Range probably uses max/min or a for loop in their function
testVec <- (seq(1,120,0.5))
stdev <- function(vec){
vecLength <- length(vec)
answer <- sqrt(sum((vec - mean(vec))^2) / (vecLength - 1))
return(answer)
}
stdev(testVec)
myData <- read.csv('titanic.csv', header = T, sep = ',')
ages <- myData$Age
print(ages)
hist(ages, main="Histogram for Passenger Age",xlab = 'Passenger Age (Years)', col = 'green', breaks = 6)
#Distribution is positive skewed.
ageRange <- myRange(ages)
ageRange <- myRange(ages)
print(ageRange)
ageRange <- myRange(ages)
print(c("The range of passenger ages is:",ageRange))
ageRange <- myRange(ages)
print(ageRange)
ageRange <- myRange(ages)
print(c("The range of passenger ages is:",ageRange[1],"to",ageRange[2]))
ageRange <- myRange(ages)
print(ageRange)
ageRange <- myRange(ages)
print("Age Range:")
print(ageRange)
print("\n")
print("test")
ageRange <- myRange(ages)
print("Age Range:")
print(ageRange)
print("Standard Deviation:")
print(stdev(ages))
ages
vecStandardDev<- function(vec){
return sd(vec)
vecStandardDev<- function(vec){
ans<- sd(vec)
return ans
vecStandardDev <- function(vec){
ans<- sd(vec)
}
vecStandardDev <- function(vec){
ans<- sd(vec)
return(ans)
}
vecStandardDev <- function(vec){
ans<- sd(vec)
return(ans)
}
vecStandardDev(c(1,2,3))
vecStandardDev <- function(vec){
ans<- sd(vec)
return(ans)
}
vecStandardDev(seq(1, 120, 0.5))
testVec <- (seq(1,120,0.5))
stdev <- function(vec){
vecLength <- length(vec)
answer <- sqrt(sum((vec - mean(vec))^2) / (vecLength - 1))
return(answer)
}
stdev(testVec)
recip <- function(paramVec){
for(i in paramVec){
#replace each position with the reciprocal
paramVec[i] = 1/(5*paramVec[i])
}
plot(paramVec)
}
recip(-2:12)
recip <- function(paramVec){
y <- 1/(5*paramVec)
plot(y)
}
recip(-2:12)
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(c("caffeine st. dev:", caffeineStandardDev))
print(caffeineRange))
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(c("caffeine st. dev:", caffeineStandardDev))
print(caffeineRange)
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(c("caffeine st. dev:", caffeineStandardDev))
print(caffeineRange)
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(caffeineStandardDev))
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(caffeineStandardDev)
print(caffeineRange)
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(c("caffeine st. dev:", caffeineStandardDev))
print(c("caffeine range vector:", caffeineRange))
vtest<-c(5, 20, 4, 2, 1,17)
myRange <- function(vec){
answerVec <- c(min(vec),max(vec))
return(answerVec)
}
myRange(vtest)
# long way to do this is using a for loop to go through the vector to find largest and smallest integer value, but using the built-in functions its easier.
#This matches R's built-in range function. Range probably uses max/min or a for loop in their function
caffeineStandardDev <- stdev(myData$Caffeine_mg_in_16_oz_coffee)
caffeineRange <- range(myData$Caffeine_mg_in_16_oz_coffee)
print(c("caffeine st. dev:", caffeineStandardDev))
print(c("caffeine range vector:"))
print(caffeineRange)
ageRange <- myRange(ages)
print("Age Range:")
print(ageRange)
print("Standard Deviation:")
print(stdev(ages))
foo <- function(first,last){
print(c(first," ",last))
}
foo <- function(first,last){
print(c(first," ",last))
}
foo(dhiraj,patel)
foo <- function(first,last){
print(c(first," ",last))
}
foo("dhiraj","patel")
foo <- function(first,last){
print(paste("Hello", "world", sep=" ")
}
foo <- function(first,last){
print(paste(first, last, sep=" ")
}
foo <- function(first,last){
print(paste(first, last, sep=" "))
}
foo("dhiraj","patel")
foo <- function(first,last){
return(paste(first, last, sep=" "))
}
foo("dhiraj","patel")
vecShortSD <- function(vec){
n <- length(vec)
ans<- sqrt((n/(n-1))*((sum(vec^2)/n)-mean(vec^2)))
return(ans)
}
vecStandardDev <- function(vec){
ans<- sd(vec)
return(ans)
}
vecShortSD(seq(1, 120, 0.5))
print("JESSICA")
vecStandardDev(seq(1,120,0.5))
#This is the same answer that I obtained in the lab.
vecShortSD <- function(vec){
n <- length(vec)
ans<- sqrt((n/(n-1))*((sum(vec^2)/n)-((mean(vec))^2)))
return(ans)
}
vecStandardDev <- function(vec){
ans<- sd(vec)
return(ans)
}
vecShortSD(seq(1, 120, 0.5))
print("JESSICA")
vecStandardDev(seq(1,120,0.5))
#This is the same answer that I obtained in the lab.
vecShortSD <- function(vec){
n <- length(vec)
ans<- sqrt((n/(n-1))*((sum(vec^2)/n)-((mean(vec))^2)))
return(ans)
}
#This is the same answer that I obtained in the lab.
foo <- function(first,last){
return(paste(first, last, sep=" "))
}
foo("dhiraj","patel")
