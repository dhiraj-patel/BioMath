knitr::opts_chunk$set(comment = '')
NeuroComputation$memoryInGB
code chunks #with comments when necessary
numberOfNeurons <- c(8480, 32940, 95833, 386830)
memoryInGB <- c(.8, 5.7, 20.1, 169)
computationTime <- c(75, 1438, 11001, 171274)
NeuroComputation <- data.frame(numberOfNeurons, memoryInGB, computationTime)
NeuroComputation
NeuroComputation[,1]
NeuroComputation$numberOfNeurons
xvar<-NeuroComputation$memoryInGB
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar)
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="red")
myfit <- lm(Y ~ X, dataframe)
LinFit <- lm(memoryInGB ~ numberOfNeurons, data = NeuroComputation)
summary(LinFit)
abline(LinFit, col="red")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
firstPlot <- plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="red")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="red")
LinFit <- lm(memoryInGB ~ numberOfNeurons, data = NeuroComputation)
abline(LinFit, col="red")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="blue")
LinFit <- lm(memoryInGB ~ numberOfNeurons, data = NeuroComputation)
abline(LinFit, col="red")
predict(LinFit, list(numberOfNeurons=8480))
NeuroComputation$memoryInGB[1]
plot(NeuroComputation$numberOfNeurons,NeuroComputation$memoryInGB)
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="blue")
LinFit <- lm(memoryInGB ~ numberOfNeurons, data = NeuroComputation)
abline(LinFit, col="red")
#This is done earlier in the lab above. A non-linear function might fit the data better because it would help show the exponential relationship between the two variables. The relationship is definitely not linear.
QuadFit <- lm(memoryInGB ~ 0 + numberOfNeurons + I(numberOfNeurons^2), data=NeuroComputation)
summary(QuadFit)
summary(QuadFit)
predict(QuadFit,list(numberOfNeurons=8480))
summary(QuadFit)
predict(QuadFit,list(numberOfNeurons=8480))
NeuroComputation$memoryInGB[1]
#When you run the two commands before this line, it returns a positive value of +1.212472, which is a sensical value for the expected memory in GB.
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480)))
quadModPredicted
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480)))
lines(x,quadModPredicted,col="purple")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=8480)))
lines(xvar,quadModPredicted,col="purple")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=32940))
,predict(QuadFit,list(numberOfNeurons=95833))
,predict(QuadFit,list(numberOfNeurons=386830)))
lines(xvar,quadModPredicted,col="purple")
summary(QuadFit)
predict(QuadFit,list(numberOfNeurons=8480))
NeuroComputation$memoryInGB[1]
,predict(QuadFit,list(numberOfNeurons=32940))
summary(QuadFit)
predict(QuadFit,list(numberOfNeurons=8480))
NeuroComputation$memoryInGB[1]
predict(QuadFit,list(numberOfNeurons=32940))
NeuroComputation$memoryInGB[2]
predict(QuadFit,list(numberOfNeurons=95833))
NeuroComputation$memoryInGB[3]
predict(QuadFit,list(numberOfNeurons=386830))
NeuroComputation$memoryInGB[4]
#When you run the two commands before this line, it returns a positive value of +1.212472, which is a sensical value for the expected memory in GB, as it is close to the 0.8 value returned from the line after the predict command.
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=32940))
,predict(QuadFit,list(numberOfNeurons=95833))
,predict(QuadFit,list(numberOfNeurons=386830)))
lines(xvar,quadModPredicted,col="purple")
yvar<-NeuroComputation$memoryInGB
xvar<-NeuroComputation$numberOfNeurons
plot(xvar,yvar,xlab="Number of Neurons",ylab="Memory Used (GB)", main="Amount of Memory Used as a Function of the Size of the Neural Network",type="o",col="green")
quadModPredicted <- c(predict(QuadFit,list(numberOfNeurons=8480))
,predict(QuadFit,list(numberOfNeurons=32940))
,predict(QuadFit,list(numberOfNeurons=95833))
,predict(QuadFit,list(numberOfNeurons=386830)))
lines(xvar,quadModPredicted,col="purple")
#The predicted values match the actual values very well. With the naked eye, I cannot even see the difference between the purple and green lines, because it is such a good fit.
t <- numeric(100,by=0.2)
t <- seq(1,100,0.2)
t
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
plot(t,y)
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 100
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 100
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 250
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 250
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 25
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t <- seq(1,100,0.2)
A <- 10
B <- 2500
y<-((A*t)+B)
plot(t,y,xlab="time",ylab="Y-value")
t
A<-10
B<-20
k<-5
t
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
t
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
expDecay
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
expDecay
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay)
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-100
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-100000
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-10
B<-2000
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-10
B<-20
k<-50000
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-10
B<-20
k<-50000000000000
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
A<-10
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
A
B<-20
k<-5
expDecay <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecay,xlab="time",ylab="y values",col="blue")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
B<-10
k<-(-1*0.000052)
expDecayNeuro <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecayNeuro,xlab="Neuron Number",ylab="Memory Used in GB",col="blue")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
B<-10
k<-(-1*0.000052)
expDecayNeuro <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecayNeuro,xlab="Neuron Number",ylab="Memory Used in GB",col="blue")
lines(xlabvar,quadModPredicted,col="purple")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
B<-10
k<-(-1*0.000052)
expDecayNeuro <-((A*exp((-1*k)*(t)))+B)
plot(t,expDecayNeuro,xlab="Neuron Number",ylab="Memory Used in GB",col="blue")
lines(xlabvar,quadModPredicted,col="black")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
B<-10
k<-(-1*0.000052)
expDecayNeuro <-((A*exp((-1*k)*(t)))+B)
plot(xlabvar,expDecayNeuro,xlab="Neuron Number",ylab="Memory Used in GB",col="blue")
xlabvar <- NeuroComputation$numberOfNeurons
ylabvar <- NeuroComputation$memoryInGB
A<- (10^(-1*7))
B<-10
k<-(-1*0.000052)
expDecayNeuro <-((A*exp((-1*k)*(xlabvar)))+B)
plot(xlabvar,expDecayNeuro,xlab="Neuron Number",ylab="Memory Used in GB",col="blue")
lines(xlabvar,quadModPredicted,col="black")
